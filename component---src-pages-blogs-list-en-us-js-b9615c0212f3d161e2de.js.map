{"version":3,"sources":["webpack:///./src/components/header.en-US.js","webpack:///./src/pages/blogs-list.en-US.js"],"names":["HeaderDe","dataQuery","url","window","location","pathname","site","siteMetadata","languages","langs","defaultLangKey","langKey","getCurrentLangKey","homeLink","langsMenu","getLangs","getUrlForLang","switcherLinks","map","lang","i","separatorClass","length","className","to","link","key","selected","navLinks","allContentfulHeaderMenu","edges","node","blogLink","contactLink","BlogListDe","children","data","blogPosts","allContentfulBlogPost","blogList","allContentfulBlogList","blogListTitle","dangerouslySetInnerHTML","__html","childContentfulBlogListBlogListContentRichTextNode","childContentfulRichText","html","blog","date","Date","parse","blogDate","getMonth","getFullYear","slug","blogTitle","blogAuthor","blogContent"],"mappings":"gLA8DeA,IAzDE,WACb,IAAMC,EAAS,OAsBTC,EAAwB,oBAAXC,OAAyBA,OAAOC,SAASC,SAAW,GAvBpD,EAwBeJ,EAAUK,KAAKC,aAAaC,UAAtDC,EAxBW,EAwBXA,MAAOC,EAxBI,EAwBJA,eACTC,EAAUC,4BAAkBH,EAAOC,EAAgBR,GACnDW,EAAQ,IAAOF,EAAP,IACRG,EAAYC,mBAASN,EAAOE,EAASK,wBAAcH,EAAUX,IAC7De,EAAgBH,EAAUI,KAAI,SAACC,EAAMC,GACnC,IAAIC,EAAiBD,EAAIN,EAAUQ,OAAO,EAAI,mCAAqC,KACnF,OACI,wBAAIC,UAAWF,GACX,kBAAC,OAAD,CAAMG,GAAIL,EAAKM,KAAMC,IAAKP,EAAKR,SAC7B,0BAAMgB,SAAUR,EAAKQ,UACA,OAAjBR,EAAKR,QAAiB,KAAK,WAS3CiB,EAAW,CACf,kBAAC,OAAD,CAAMJ,GAAG,kBAAkBD,UAAS,2BAA8BtB,EAAU4B,wBAAwBC,MAAM,GAAGC,KAAKC,UAClH,kBAAC,OAAD,CAAMR,GAAG,eAAeD,UAAS,2BAA8BtB,EAAU4B,wBAAwBC,MAAM,GAAGC,KAAKE,cAGjH,OACE,kBAAC,IAAD,CACML,SAAUA,EACVX,cAAeA,M,kHCYZiB,UA9DI,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SACZC,GADqC,EAAfhC,SAClB,QA+BJiC,EAAWD,EAAKE,sBAAsBR,MACtCS,EAAWH,EAAKI,sBAAsBV,MAAM,GAAGC,KAErD,OACI,yBAAKR,UAAS,kBACV,kBAAC,IAAD,MACA,6BAASA,UAAS,WACd,8BAAOY,GACP,wBAAIZ,UAAS,sBAAyBgB,EAASE,eAC/C,yBAAKlB,UAAS,mBAAsBmB,wBAAyB,CAACC,OAAQJ,EAASK,mDAAmDC,wBAAwBC,QAC1J,wBAAIvB,UAAS,eACRc,EAAUnB,KAAI,SAAC6B,GACZ,IAAMC,EAAO,IAAIC,KAAKA,KAAKC,MAAMH,EAAKhB,KAAKoB,WAC3C,OAAO,4BAAI,8BAAOH,EAAKI,WAAa,EAAzB,IAA6BJ,EAAKK,eAAqB,kBAAC,OAAD,CAC9D7B,GAAE,SAAWuB,EAAKhB,KAAKuB,MAASP,EAAKhB,KAAKwB,WAAiB,2CAAiBR,EAAKhB,KAAKyB,YACtF,uBAAGjC,UAAS,qBAAwBmB,wBAAyB,CAACC,OAAOI,EAAKhB,KAAK0B,YAAYZ,wBAAwBC,cAKnI,kBAAC,IAAD,S","file":"component---src-pages-blogs-list-en-us-js-b9615c0212f3d161e2de.js","sourcesContent":["import {graphql, Link, useStaticQuery} from \"gatsby\"\nimport React from \"react\"\nimport {getCurrentLangKey, getLangs, getUrlForLang} from \"ptz-i18n\";\nimport HeaderLayout from \"./header_layout\";\n\nconst HeaderDe = () => {\n    const dataQuery = useStaticQuery(graphql`\n        query headerEn {\n          allContentfulHeaderMenu(filter: {node_locale: {eq: \"en-US\"}}){\n            edges {\n              node {\n                contactLink\n                blogLink\n              }\n            }\n          }\n          site {\n                siteMetadata {\n                  title,\n                  description,\n                  languages {\n                    defaultLangKey\n                    langs\n                  }\n                }\n          }\n        }\n      `);\n    const url = typeof window !== 'undefined' ? window.location.pathname : '';\n    const { langs, defaultLangKey } = dataQuery.site.siteMetadata.languages;\n    const langKey = getCurrentLangKey(langs, defaultLangKey, url);\n    const homeLink = `/${langKey}/`;\n    const langsMenu = getLangs(langs, langKey, getUrlForLang(homeLink, url));\n    const switcherLinks = langsMenu.map((lang, i) => {\n            let separatorClass = i < langsMenu.length-1 ? \"header__lang-switcher__separator\" : null;\n            return (\n                <li className={separatorClass}>\n                    <Link to={lang.link} key={lang.langKey}>\n                      <span selected={lang.selected}>\n                         {lang.langKey === 'de'?'DE':'EN'}\n                      </span>\n\n                    </Link>\n                </li>\n            )\n        }\n    );\n\n    const navLinks = [\n      <Link to=\"/de/blogs-list/\" className={`header__navigation-link`}>{dataQuery.allContentfulHeaderMenu.edges[0].node.blogLink}</Link>,\n      <Link to=\"/de/contact/\" className={`header__navigation-link`}>{dataQuery.allContentfulHeaderMenu.edges[0].node.contactLink}</Link>\n    ];\n\n    return (\n      <HeaderLayout\n            navLinks={navLinks}\n            switcherLinks={switcherLinks}\n      >\n      </HeaderLayout>\n    );\n}\n\nexport default HeaderDe\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport {useStaticQuery, graphql, Link} from \"gatsby\"\nimport HeaderEn from \"../components/header.en-US\";\nimport FooterDe from \"../components/footer.de-DE\";\n\nconst BlogListDe = ({ children, location }) => {\n    const data = useStaticQuery(graphql`\n    query BlogListEn {\n          allContentfulBlogPost(filter: {node_locale: {eq: \"en-US\"}}) {\n            edges {\n              node {\n                slug,\n                blogTitle,\n                blogAuthor,\n                blogDate,\n                blogContent {\n                  childContentfulRichText {\n                    html\n                  }\n                }\n              }\n            }\n          }\n          allContentfulBlogList(filter: {node_locale: {eq: \"en-US\"}}) {\n            edges {\n              node {\n                blogListTitle\n                childContentfulBlogListBlogListContentRichTextNode {\n                  childContentfulRichText {\n                    html\n                  }\n                }\n              }\n            }\n          }\n        }\n  `)\n    const blogPosts =data.allContentfulBlogPost.edges;\n    const blogList = data.allContentfulBlogList.edges[0].node;\n\n    return (\n        <div className={`main-container`}>\n            <HeaderEn/>\n            <article className={`content`}>\n                <main>{children}</main>\n                <h1 className={`blog-list__heading`}>{blogList.blogListTitle}</h1>\n                <div className={`blog-list__title`} dangerouslySetInnerHTML={{__html: blogList.childContentfulBlogListBlogListContentRichTextNode.childContentfulRichText.html}}/>\n                <ul className={`blogs__list`}>\n                    {blogPosts.map((blog)=> {\n                        const date = new Date(Date.parse(blog.node.blogDate));\n                        return <li><span>{date.getMonth() + 1}/{date.getFullYear()}</span><Link\n                            to={`en-US/${blog.node.slug}`}>{blog.node.blogTitle}</Link><span> Author - {blog.node.blogAuthor}</span>\n                            <p className={`blog-list__content`} dangerouslySetInnerHTML={{__html:blog.node.blogContent.childContentfulRichText.html}} />\n                        </li>\n                    })}\n                </ul>\n            </article>\n            <FooterDe />\n        </div>\n    )\n}\n\nBlogListDe.propTypes = {\n    children: PropTypes.node.isRequired,\n    location: PropTypes.object,\n}\n\nexport default BlogListDe\n"],"sourceRoot":""}