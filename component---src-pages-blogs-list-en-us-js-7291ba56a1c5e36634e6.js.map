{"version":3,"sources":["webpack:///./src/components/header.en-US.js","webpack:///./src/pages/blogs-list.en-US.js"],"names":["HeaderDe","dataQuery","url","window","location","pathname","site","siteMetadata","languages","langs","defaultLangKey","langKey","getCurrentLangKey","homeLink","links","getLangs","getUrlForLang","map","lang","to","link","key","selected","className","src","image","alt","allContentfulHeaderMenu","edges","node","blogLink","contactLink","BlogListDe","children","data","blogPosts","allContentfulBlogPost","blogList","allContentfulBlogList","blogListTitle","dangerouslySetInnerHTML","__html","childContentfulBlogListBlogListContentRichTextNode","childContentfulRichText","html","blog","date","Date","parse","blogDate","getMonth","getFullYear","slug","blogAuthor","blogContent"],"mappings":"yLAkEeA,IA7DE,WACb,IAAMC,EAAS,OAsBTC,EAAwB,oBAAXC,OAAyBA,OAAOC,SAASC,SAAW,GAvBpD,EAwBeJ,EAAUK,KAAKC,aAAaC,UAAtDC,EAxBW,EAwBXA,MAAOC,EAxBI,EAwBJA,eACTC,EAAUC,4BAAkBH,EAAOC,EAAgBR,GACnDW,EAAQ,IAAOF,EAAP,IAERG,EADYC,mBAASN,EAAOE,EAASK,wBAAcH,EAAUX,IAC3Ce,KAAI,SAACC,GACrB,OACI,4BACI,kBAAC,OAAD,CAAMC,GAAID,EAAKE,KAAMC,IAAKH,EAAKP,SAC7B,0BAAMW,SAAUJ,EAAKI,UACA,OAAjBJ,EAAKP,QAAiB,SAAS,gBAQrD,OACI,4BAAQY,UAAS,UACb,yBAAKA,UAAS,2BACV,kBAAC,OAAD,CAAMJ,GAAI,KACN,yBAAKI,UAAS,eAAkBC,IAAKC,IAAOC,IAAG,wBAEnD,yBAAKH,UAAS,sBACV,kBAAC,OAAD,CAAMJ,GAAG,qBAAqBI,UAAS,2BAA8BtB,EAAU0B,wBAAwBC,MAAM,GAAGC,KAAKC,UACrH,kBAAC,OAAD,CAAMX,GAAG,kBAAkBI,UAAS,2BAA8BtB,EAAU0B,wBAAwBC,MAAM,GAAGC,KAAKE,cAEtH,yBAAKR,UAAS,yBACV,4BACKT,Q,kHCSVkB,UA7DI,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SACZC,GADqC,EAAf9B,SAClB,QA8BJ+B,EAAWD,EAAKE,sBAAsBR,MACtCS,EAAWH,EAAKI,sBAAsBV,MAAM,GAAGC,KAErD,OACI,yBAAKN,UAAS,kBACV,kBAAC,IAAD,MACA,6BAASA,UAAS,WACd,8BAAOU,GACP,wBAAIV,UAAS,sBAAyBc,EAASE,eAC/C,yBAAKhB,UAAS,mBAAsBiB,wBAAyB,CAACC,OAAQJ,EAASK,mDAAmDC,wBAAwBC,QAC1J,wBAAIrB,UAAS,eACRY,EAAUlB,KAAI,SAAC4B,GACZ,IAAMC,EAAO,IAAIC,KAAKA,KAAKC,MAAMH,EAAKhB,KAAKoB,WAC3C,OAAO,4BAAI,8BAAOH,EAAKI,WAAa,EAAzB,IAA6BJ,EAAKK,eAAqB,kBAAC,OAAD,CAC9DhC,GAAE,SAAW0B,EAAKhB,KAAKuB,MAASP,EAAKhB,KAAKuB,MAAY,2CAAiBP,EAAKhB,KAAKwB,YACjF,uBAAG9B,UAAS,qBAAwBiB,wBAAyB,CAACC,OAAOI,EAAKhB,KAAKyB,YAAYX,wBAAwBC,cAKnI,kBAAC,IAAD,S","file":"component---src-pages-blogs-list-en-us-js-7291ba56a1c5e36634e6.js","sourcesContent":["import {graphql, Link, useStaticQuery} from \"gatsby\"\nimport React from \"react\"\nimport image from '../images/logo.svg'\nimport {getCurrentLangKey, getLangs, getUrlForLang} from \"ptz-i18n\";\n\nconst HeaderDe = () => {\n    const dataQuery = useStaticQuery(graphql`\n        query headerEn {\n          allContentfulHeaderMenu(filter: {node_locale: {eq: \"en-US\"}}){\n            edges {\n              node {\n                contactLink\n                blogLink\n              }\n            }\n          }\n          site {\n                siteMetadata {\n                  title,\n                  description,\n                  languages {\n                    defaultLangKey\n                    langs\n                  }\n                }\n          }\n        }\n      `);\n    const url = typeof window !== 'undefined' ? window.location.pathname : '';\n    const { langs, defaultLangKey } = dataQuery.site.siteMetadata.languages;\n    const langKey = getCurrentLangKey(langs, defaultLangKey, url);\n    const homeLink = `/${langKey}/`;\n    const langsMenu = getLangs(langs, langKey, getUrlForLang(homeLink, url));\n    const links = langsMenu.map((lang) => {\n            return (\n                <li>\n                    <Link to={lang.link} key={lang.langKey}>\n                      <span selected={lang.selected}>\n                         {lang.langKey === 'de'?'German':'English'}\n                      </span>\n                    </Link>\n                </li>\n            )\n        }\n    );\n\n    return (\n        <header className={`header`}>\n            <div className={`header__content-wrapper`}>\n                <Link to={'/'}>\n                    <img className={`header__logo`} src={image} alt={`Equal Experts logo`} />\n                </Link>\n                <nav className={`header__navigation`}>\n                    <Link to=\"/en-US/blogs-list/\" className={`header__navigation-link`}>{dataQuery.allContentfulHeaderMenu.edges[0].node.blogLink}</Link>\n                    <Link to=\"/en-US/contact/\" className={`header__navigation-link`}>{dataQuery.allContentfulHeaderMenu.edges[0].node.contactLink}</Link>\n                </nav>\n                <div className={`header__lang-switcher`}>\n                    <ul>\n                        {links}\n                    </ul>\n                </div>\n            </div>\n        </header>\n    );\n}\n\nexport default HeaderDe\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport {useStaticQuery, graphql, Link} from \"gatsby\"\nimport HeaderEn from \"../components/header.en-US\";\nimport Footer from \"../components/footer\";\n\nconst BlogListDe = ({ children, location }) => {\n    const data = useStaticQuery(graphql`\n    query BlogListEn {\n          allContentfulBlogPost(filter: {node_locale: {eq: \"en-US\"}}) {\n            edges {\n              node {\n                slug,\n                blogAuthor,\n                blogDate,\n                blogContent {\n                  childContentfulRichText {\n                    html\n                  }\n                }\n              }\n            }\n          }\n          allContentfulBlogList(filter: {node_locale: {eq: \"en-US\"}}) {\n            edges {\n              node {\n                blogListTitle\n                childContentfulBlogListBlogListContentRichTextNode {\n                  childContentfulRichText {\n                    html\n                  }\n                }\n              }\n            }\n          }\n        }\n  `)\n    const blogPosts =data.allContentfulBlogPost.edges;\n    const blogList = data.allContentfulBlogList.edges[0].node;\n\n    return (\n        <div className={`main-container`}>\n            <HeaderEn/>\n            <article className={`content`}>\n                <main>{children}</main>\n                <h1 className={`blog-list__heading`}>{blogList.blogListTitle}</h1>\n                <div className={`blog-list__title`} dangerouslySetInnerHTML={{__html: blogList.childContentfulBlogListBlogListContentRichTextNode.childContentfulRichText.html}}/>\n                <ul className={`blogs__list`}>\n                    {blogPosts.map((blog)=> {\n                        const date = new Date(Date.parse(blog.node.blogDate));\n                        return <li><span>{date.getMonth() + 1}/{date.getFullYear()}</span><Link\n                            to={`en-US/${blog.node.slug}`}>{blog.node.slug}</Link><span> Author - {blog.node.blogAuthor}</span>\n                            <p className={`blog-list__content`} dangerouslySetInnerHTML={{__html:blog.node.blogContent.childContentfulRichText.html}} />\n                        </li>\n                    })}\n                </ul>\n            </article>\n            <Footer />\n        </div>\n    )\n}\n\nBlogListDe.propTypes = {\n    children: PropTypes.node.isRequired,\n    location: PropTypes.object,\n}\n\nexport default BlogListDe\n"],"sourceRoot":""}