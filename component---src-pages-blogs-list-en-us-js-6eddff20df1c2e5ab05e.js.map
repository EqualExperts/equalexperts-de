{"version":3,"sources":["webpack:///./src/components/header.en-US.js","webpack:///./src/pages/blogs-list.en-US.js","webpack:///./src/components/footer.de-DE.js"],"names":["HeaderDe","dataQuery","url","window","location","pathname","site","siteMetadata","languages","langs","defaultLangKey","langKey","getCurrentLangKey","homeLink","navLinks","allContentfulMainNav","edges","node","navItems","switcherLinks","BlogListDe","children","data","blogPosts","allContentfulBlogPost","blogList","allContentfulBlogList","className","blogListTitle","dangerouslySetInnerHTML","__html","childContentfulBlogListBlogListContentRichTextNode","childContentfulRichText","html","map","blog","date","Date","parse","blogDate","getMonth","getFullYear","to","slug","blogTitle","blogAuthor","blogContent","FooterDe","legalLinks","allContentfulLegalNav"],"mappings":"0JA6CeA,IAxCE,WACb,IAAMC,EAAS,OAwBTC,EAAwB,oBAAXC,OAAyBA,OAAOC,SAASC,SAAW,GAzBpD,EA0BeJ,EAAUK,KAAKC,aAAaC,UAAtDC,EA1BW,EA0BXA,MAAOC,EA1BI,EA0BJA,eACTC,EAAUC,4BAAkBH,EAAOC,EAAgBR,GACnDW,EAAYF,IAAYD,EAAkB,GAA/B,IAAwCC,EAAxC,IAEjB,OACE,kBAAC,IAAD,CACEE,SAAUA,EACVC,SAAUb,EAAUc,qBAAqBC,MAAM,GAAGC,KAAKC,SACvDC,cAAeV,M,kHC6BRW,UA9DI,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SACZC,GADqC,EAAflB,SAClB,QA+BJmB,EAAWD,EAAKE,sBAAsBR,MACtCS,EAAWH,EAAKI,sBAAsBV,MAAM,GAAGC,KAErD,OACI,yBAAKU,UAAS,kBACV,kBAAC,IAAD,MACA,6BAASA,UAAS,WACd,8BAAON,GACP,wBAAIM,UAAS,sBAAyBF,EAASG,eAC/C,yBAAKD,UAAS,mBAAsBE,wBAAyB,CAACC,OAAQL,EAASM,mDAAmDC,wBAAwBC,QAC1J,wBAAIN,UAAS,eACRJ,EAAUW,KAAI,SAACC,GACZ,IAAMC,EAAO,IAAIC,KAAKA,KAAKC,MAAMH,EAAKlB,KAAKsB,WAC3C,OAAO,4BAAI,8BAAOH,EAAKI,WAAa,EAAzB,IAA6BJ,EAAKK,eAAqB,kBAAC,OAAD,CAC9DC,GAAE,SAAWP,EAAKlB,KAAK0B,MAASR,EAAKlB,KAAK2B,WAAiB,2CAAiBT,EAAKlB,KAAK4B,YACtF,uBAAGlB,UAAS,qBAAwBE,wBAAyB,CAACC,OAAOK,EAAKlB,KAAK6B,YAAYd,wBAAwBC,cAKnI,kBAAC,IAAD,S,4nPCHGc,IAlDE,WACf,IAAM9C,EAAS,OAkCPC,EAAwB,oBAAXC,OAAyBA,OAAOC,SAASC,SAAW,GAnCpD,EAoCeJ,EAAUK,KAAKC,aAAaC,UAAtDC,EApCW,EAoCXA,MAAOC,EApCI,EAoCJA,eACTC,EAAUC,4BAAkBH,EAAOC,EAAgBR,GACrDW,EAAYF,IAAYD,EAAkB,IAA/B,IAAyCC,EAAzC,IACjB,OACE,kBAAC,IAAD,CACEE,SAAUA,EACVC,SAAUb,EAAUc,qBAAqBC,MAAM,GAAGC,KAAKC,SACvD8B,WAAY/C,EAAUgD,sBAAsBjC,MAAM,GAAGC,KAAKC,SAC1DC,cAAeV,M","file":"component---src-pages-blogs-list-en-us-js-6eddff20df1c2e5ab05e.js","sourcesContent":["import {graphql, useStaticQuery} from \"gatsby\"\nimport React from \"react\"\nimport {getCurrentLangKey} from \"ptz-i18n\";\nimport HeaderLayout from \"./header_layout\";\n\nconst HeaderDe = () => {\n    const dataQuery = useStaticQuery(graphql`\n        query headerEn {\n          allContentfulMainNav(filter: {node_locale: {eq: \"en-US\"}}){\n            edges {\n              node {\n                navItems {\n                  navItemText\n                  navItemUrl\n                }\n              }\n            }\n          }\n          site {\n                siteMetadata {\n                  title,\n                  description,\n                  languages {\n                    defaultLangKey\n                    langs\n                  }\n                }\n          }\n        }\n      `);\n    const url = typeof window !== 'undefined' ? window.location.pathname : '';\n    const { langs, defaultLangKey } = dataQuery.site.siteMetadata.languages;\n    const langKey = getCurrentLangKey(langs, defaultLangKey, url);\n    const homeLink = (langKey === defaultLangKey) ? '' : `/${langKey}/`;\n\n    return (\n      <HeaderLayout\n        homeLink={homeLink}\n        navLinks={dataQuery.allContentfulMainNav.edges[0].node.navItems}\n        switcherLinks={langs}\n      >\n      </HeaderLayout>\n    );\n}\n\nexport default HeaderDe\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport {useStaticQuery, graphql, Link} from \"gatsby\"\nimport HeaderEn from \"../components/header.en-US\";\nimport FooterDe from \"../components/footer.de-DE\";\n\nconst BlogListDe = ({ children, location }) => {\n    const data = useStaticQuery(graphql`\n    query BlogListEn {\n          allContentfulBlogPost(filter: {node_locale: {eq: \"en-US\"}}) {\n            edges {\n              node {\n                slug,\n                blogTitle,\n                blogAuthor,\n                blogDate,\n                blogContent {\n                  childContentfulRichText {\n                    html\n                  }\n                }\n              }\n            }\n          }\n          allContentfulBlogList(filter: {node_locale: {eq: \"en-US\"}}) {\n            edges {\n              node {\n                blogListTitle\n                childContentfulBlogListBlogListContentRichTextNode {\n                  childContentfulRichText {\n                    html\n                  }\n                }\n              }\n            }\n          }\n        }\n  `)\n    const blogPosts =data.allContentfulBlogPost.edges;\n    const blogList = data.allContentfulBlogList.edges[0].node;\n\n    return (\n        <div className={`main-container`}>\n            <HeaderEn/>\n            <article className={`content`}>\n                <main>{children}</main>\n                <h1 className={`blog-list__heading`}>{blogList.blogListTitle}</h1>\n                <div className={`blog-list__title`} dangerouslySetInnerHTML={{__html: blogList.childContentfulBlogListBlogListContentRichTextNode.childContentfulRichText.html}}/>\n                <ul className={`blogs__list`}>\n                    {blogPosts.map((blog)=> {\n                        const date = new Date(Date.parse(blog.node.blogDate));\n                        return <li><span>{date.getMonth() + 1}/{date.getFullYear()}</span><Link\n                            to={`en-US/${blog.node.slug}`}>{blog.node.blogTitle}</Link><span> Author - {blog.node.blogAuthor}</span>\n                            <p className={`blog-list__content`} dangerouslySetInnerHTML={{__html:blog.node.blogContent.childContentfulRichText.html}} />\n                        </li>\n                    })}\n                </ul>\n            </article>\n            <FooterDe />\n        </div>\n    )\n}\n\nBlogListDe.propTypes = {\n    children: PropTypes.node.isRequired,\n    location: PropTypes.object,\n}\n\nexport default BlogListDe\n","import {graphql, useStaticQuery} from \"gatsby\"\nimport React from \"react\"\nimport FooterLayout from \"./footer_layout\";\nimport {getCurrentLangKey} from \"ptz-i18n\";\n\nconst FooterDe = () => {\n  const dataQuery = useStaticQuery(graphql`\n      query footerDe {\n        allContentfulMainNav(filter: {node_locale: {eq: \"de\"}}){\n          edges {\n            node {\n              navItems {\n                navItemText\n                navItemUrl\n              }\n            }\n          }\n        }\n        allContentfulLegalNav(filter: {node_locale: {eq: \"de\"}}){\n          edges {\n            node {\n              navItems {\n                navItemText\n                navItemUrl\n              }\n            }\n          }\n        }\n        site {\n          siteMetadata {\n            title,\n            description,\n            languages {\n              defaultLangKey\n              langs\n            }\n          }\n        }\n      }\n    `);\n    const url = typeof window !== 'undefined' ? window.location.pathname : '';\n    const { langs, defaultLangKey } = dataQuery.site.siteMetadata.languages;\n    const langKey = getCurrentLangKey(langs, defaultLangKey, url);\n    let homeLink = (langKey === defaultLangKey) ? '/' : `/${langKey}/`;\n  return (\n    <FooterLayout\n      homeLink={homeLink}\n      navLinks={dataQuery.allContentfulMainNav.edges[0].node.navItems}\n      legalLinks={dataQuery.allContentfulLegalNav.edges[0].node.navItems}\n      switcherLinks={langs}\n    >\n    </FooterLayout>\n  );\n}\n\nexport default FooterDe\n"],"sourceRoot":""}